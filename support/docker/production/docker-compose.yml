version: "3.3"

services:

  peertube:
    # If you don't want to use the official image and build one from sources
    # build:
    #   context: .
    #   dockerfile: ./support/docker/production/Dockerfile.stretch
    image: chocobozzz/peertube:production-stretch
    environment:
      PEERTUBE_WEBSERVER_HOSTNAME: my.domain.tld
      PEERTUBE_WEBSERVER_PORT: 443
      PEERTUBE_WEBSERVER_HTTPS: "true"
      PEERTUBE_ADMIN_EMAIL: admin@domain.tld
      PEERTUBE_DB_HOSTNAME: postgres
      PEERTUBE_DB_USERNAME: postgres_user
      PEERTUBE_DB_PASSWORD: postgres_password
      PEERTUBE_SIGNUP_ENABLED: "true"
      PEERTUBE_TRANSCODING_ENABLED: "true"
      PEERTUBE_REDIS_HOSTNAME: redis
      PEERTUBE_SMTP_HOSTNAME: null
      PEERTUBE_SMTP_PORT: 25
      PEERTUBE_SMTP_FROM: noreply@peertube.domain.tld
      PEERTUBE_SMTP_TLS: "true"
    # Traefik labels are suggested as an example for people using Traefik,
    # remove them if you are using another reverse proxy.
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: "Host:${PEERTUBE_WEBSERVER_HOSTNAME}"
      traefik.port: "9000"
    # If you don't want to use a reverse proxy (not suitable for production!)
    # ports:
      # - "80:9000"
    volumes:
      - ./docker-volume/data:/data
      - ./docker-volume/config:/config
    depends_on:
      - postgres
      - redis
    restart: "always"

  postgres:
    image: postgres:10-alpine
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: peertube
    volumes:
      - ./docker-volume/db:/var/lib/postgresql/data
    restart: "always"

  redis:
    image: redis:4-alpine
    volumes:
      - ./docker-volume/redis:/data
    restart: "always"
